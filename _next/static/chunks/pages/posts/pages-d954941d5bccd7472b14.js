_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[10],{VkGH:function(e,t,a){"use strict";a.r(t);var n=a("rePB"),r=a("Ff2n"),o=(a("q1tI"),a("89qd")),s=a("JU6i"),i=a.n(s),p=a("UY+1"),c=a("R9PV");function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}var d=function(e){return Object(p.withSSG)(i()({filename:"pages.md",route:"/posts/pages",meta:{title:"Next.js Pages",date:"2021/3/18",description:"Learn more about Next.js pages.",tag:"web development",author:"You"},pageMap:[{name:"_app",route:"/_app"},{name:"_document",route:"/_document"},{name:"index",route:"/",frontMatter:{type:"page",title:"About",date:"2021-03-19T00:00:00.000Z"}},{name:"posts",children:[{name:"index",route:"/posts",frontMatter:{type:"posts",title:"Posts",date:"2021-03-18T00:00:00.000Z"}},{name:"markdown",route:"/posts/markdown",frontMatter:{title:"Markdown Examples",date:"2021/3/19",description:"View examples of all possible Markdown options.",tag:"web development",author:"You"}},{name:"pages",route:"/posts/pages",frontMatter:{title:"Next.js Pages",date:"2021/3/18",description:"Learn more about Next.js pages.",tag:"web development",author:"You"}}],route:"/posts"},{name:"tags",children:[{name:"[tag]",route:"/tags/[tag]",frontMatter:{type:"tag",title:"Tagged Posts"}}],route:"/tags"}]},c.a))(e)};function u(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(o.a)(d,function(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){Object(n.a)(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}({components:t},a),Object(o.a)("h1",null,"Next.js Pages"),Object(o.a)("p",null,"In Next.js, a ",Object(o.a)("strong",{parentName:"p"},"page")," is a ",Object(o.a)("a",{href:"https://reactjs.org/docs/components-and-props.html",parentName:"p"},"React Component")," exported from a ",Object(o.a)("inlineCode",{parentName:"p"},".js"),", ",Object(o.a)("inlineCode",{parentName:"p"},".jsx"),", ",Object(o.a)("inlineCode",{parentName:"p"},".ts"),", or ",Object(o.a)("inlineCode",{parentName:"p"},".tsx")," file in the ",Object(o.a)("inlineCode",{parentName:"p"},"pages")," directory. Each page is associated with a route based on its file name."),Object(o.a)("p",null,Object(o.a)("strong",{parentName:"p"},"Example"),": If you create ",Object(o.a)("inlineCode",{parentName:"p"},"pages/about.js")," that exports a React component like below, it will be accessible at ",Object(o.a)("inlineCode",{parentName:"p"},"/about"),"."),Object(o.a)("pre",null,Object(o.a)("code",{parentName:"pre"},"function About() {\n  return <div>About</div>\n}\n\nexport default About\n")),Object(o.a)("h3",null,"Pages with Dynamic Routes"),Object(o.a)("p",null,"Next.js supports pages with dynamic routes. For example, if you create a file called ",Object(o.a)("inlineCode",{parentName:"p"},"pages/posts/[id].js"),", then it will be accessible at ",Object(o.a)("inlineCode",{parentName:"p"},"posts/1"),", ",Object(o.a)("inlineCode",{parentName:"p"},"posts/2"),", etc."),Object(o.a)("blockquote",null,Object(o.a)("p",{parentName:"blockquote"},"To learn more about dynamic routing, check the ",Object(o.a)("a",{href:"/docs/routing/dynamic-routes.md",parentName:"p"},"Dynamic Routing documentation"),".")),Object(o.a)("h2",null,"Pre-rendering"),Object(o.a)("p",null,"By default, Next.js ",Object(o.a)("strong",{parentName:"p"},"pre-renders")," every page. This means that Next.js generates HTML for each page in advance, instead of having it all done by client-side JavaScript. Pre-rendering can result in better performance and SEO."),Object(o.a)("p",null,"Each generated HTML is associated with minimal JavaScript code necessary for that page. When a page is loaded by the browser, its JavaScript code runs and makes the page fully interactive. (This process is called ",Object(o.a)("em",{parentName:"p"},"hydration"),".)"),Object(o.a)("h3",null,"Two forms of Pre-rendering"),Object(o.a)("p",null,"Next.js has two forms of pre-rendering: ",Object(o.a)("strong",{parentName:"p"},"Static Generation")," and ",Object(o.a)("strong",{parentName:"p"},"Server-side Rendering"),". The difference is in ",Object(o.a)("strong",{parentName:"p"},"when")," it generates the HTML for a page."),Object(o.a)("ul",null,Object(o.a)("li",{parentName:"ul"},Object(o.a)("a",{href:"#static-generation-recommended",parentName:"li"},Object(o.a)("strong",{parentName:"a"},"Static Generation (Recommended)")),": The HTML is generated at ",Object(o.a)("strong",{parentName:"li"},"build time")," and will be reused on each request."),Object(o.a)("li",{parentName:"ul"},Object(o.a)("a",{href:"#server-side-rendering",parentName:"li"},Object(o.a)("strong",{parentName:"a"},"Server-side Rendering")),": The HTML is generated on ",Object(o.a)("strong",{parentName:"li"},"each request"),".")),Object(o.a)("p",null,"Importantly, Next.js lets you ",Object(o.a)("strong",{parentName:"p"},"choose"),' which pre-rendering form you\'d like to use for each page. You can create a "hybrid" Next.js app by using Static Generation for most pages and using Server-side Rendering for others.'),Object(o.a)("p",null,"We ",Object(o.a)("strong",{parentName:"p"},"recommend")," using ",Object(o.a)("strong",{parentName:"p"},"Static Generation")," over Server-side Rendering for performance reasons. Statically generated pages can be cached by CDN with no extra configuration to boost performance. However, in some cases, Server-side Rendering might be the only option."),Object(o.a)("p",null,"You can also use ",Object(o.a)("strong",{parentName:"p"},"Client-side Rendering")," along with Static Generation or Server-side Rendering. That means some parts of a page can be rendered entirely by client side JavaScript. To learn more, take a look at the ",Object(o.a)("a",{href:"/docs/basic-features/data-fetching.md#fetching-data-on-the-client-side",parentName:"p"},"Data Fetching")," documentation."),Object(o.a)("h2",null,"Static Generation (Recommended)"),Object(o.a)("p",null,"If a page uses ",Object(o.a)("strong",{parentName:"p"},"Static Generation"),", the page HTML is generated at ",Object(o.a)("strong",{parentName:"p"},"build time"),". That means in production, the page HTML is generated when you run ",Object(o.a)("inlineCode",{parentName:"p"},"next build")," . This HTML will then be reused on each request. It can be cached by a CDN."),Object(o.a)("p",null,"In Next.js, you can statically generate pages ",Object(o.a)("strong",{parentName:"p"},"with or without data"),". Let's take a look at each case."),Object(o.a)("h3",null,"Static Generation without data"),Object(o.a)("p",null,"By default, Next.js pre-renders pages using Static Generation without fetching data. Here's an example:"),Object(o.a)("pre",null,Object(o.a)("code",{parentName:"pre"},"function About() {\n  return <div>About</div>\n}\n\nexport default About\n")),Object(o.a)("p",null,"Note that this page does not need to fetch any external data to be pre-rendered. In cases like this, Next.js generates a single HTML file per page during build time."),Object(o.a)("h3",null,"Static Generation with data"),Object(o.a)("p",null,"Some pages require fetching external data for pre-rendering. There are two scenarios, and one or both might apply. In each case, you can use a special function Next.js provides:"),Object(o.a)("ol",null,Object(o.a)("li",{parentName:"ol"},"Your page ",Object(o.a)("strong",{parentName:"li"},"content")," depends on external data: Use ",Object(o.a)("inlineCode",{parentName:"li"},"getStaticProps"),"."),Object(o.a)("li",{parentName:"ol"},"Your page ",Object(o.a)("strong",{parentName:"li"},"paths")," depend on external data: Use ",Object(o.a)("inlineCode",{parentName:"li"},"getStaticPaths")," (usually in addition to ",Object(o.a)("inlineCode",{parentName:"li"},"getStaticProps"),").")),Object(o.a)("h4",null,"Scenario 1: Your page ",Object(o.a)("strong",{parentName:"h4"},"content")," depends on external data"),Object(o.a)("p",null,Object(o.a)("strong",{parentName:"p"},"Example"),": Your blog page might need to fetch the list of blog posts from a CMS (content management system)."),Object(o.a)("pre",null,Object(o.a)("code",{parentName:"pre"},"// TODO: Need to fetch `posts` (by calling some API endpoint)\n//       before this page can be pre-rendered.\nfunction Blog({ posts }) {\n  return (\n    <ul>\n      {posts.map((post) => (\n        <li>{post.title}</li>\n      ))}\n    </ul>\n  )\n}\n\nexport default Blog\n")),Object(o.a)("p",null,"To fetch this data on pre-render, Next.js allows you to ",Object(o.a)("inlineCode",{parentName:"p"},"export")," an ",Object(o.a)("inlineCode",{parentName:"p"},"async")," function called ",Object(o.a)("inlineCode",{parentName:"p"},"getStaticProps")," from the same file. This function gets called at build time and lets you pass fetched data to the page's ",Object(o.a)("inlineCode",{parentName:"p"},"props")," on pre-render."),Object(o.a)("pre",null,Object(o.a)("code",{parentName:"pre"},"function Blog({ posts }) {\n  // Render posts...\n}\n\n// This function gets called at build time\nexport async function getStaticProps() {\n  // Call an external API endpoint to get posts\n  const res = await fetch('https://.../posts')\n  const posts = await res.json()\n\n  // By returning { props: { posts } }, the Blog component\n  // will receive `posts` as a prop at build time\n  return {\n    props: {\n      posts\n    }\n  }\n}\n\nexport default Blog\n")),Object(o.a)("p",null,"To learn more about how ",Object(o.a)("inlineCode",{parentName:"p"},"getStaticProps")," works, check out the ",Object(o.a)("a",{href:"/docs/basic-features/data-fetching.md#getstaticprops-static-generation",parentName:"p"},"Data Fetching documentation"),"."),Object(o.a)("h4",null,"Scenario 2: Your page paths depend on external data"),Object(o.a)("p",null,"Next.js allows you to create pages with ",Object(o.a)("strong",{parentName:"p"},"dynamic routes"),". For example, you can create a file called ",Object(o.a)("inlineCode",{parentName:"p"},"pages/posts/[id].js")," to show a single blog post based on ",Object(o.a)("inlineCode",{parentName:"p"},"id"),". This will allow you to show a blog post with ",Object(o.a)("inlineCode",{parentName:"p"},"id: 1")," when you access ",Object(o.a)("inlineCode",{parentName:"p"},"posts/1"),"."),Object(o.a)("blockquote",null,Object(o.a)("p",{parentName:"blockquote"},"To learn more about dynamic routing, check the ",Object(o.a)("a",{href:"/docs/routing/dynamic-routes.md",parentName:"p"},"Dynamic Routing documentation"),".")),Object(o.a)("p",null,"However, which ",Object(o.a)("inlineCode",{parentName:"p"},"id")," you want to pre-render at build time might depend on external data."),Object(o.a)("p",null,Object(o.a)("strong",{parentName:"p"},"Example"),": suppose that you've only added one blog post (with ",Object(o.a)("inlineCode",{parentName:"p"},"id: 1"),") to the database. In this case, you'd only want to pre-render ",Object(o.a)("inlineCode",{parentName:"p"},"posts/1")," at build time."),Object(o.a)("p",null,"Later, you might add the second post with ",Object(o.a)("inlineCode",{parentName:"p"},"id: 2"),". Then you'd want to pre-render ",Object(o.a)("inlineCode",{parentName:"p"},"posts/2")," as well."),Object(o.a)("p",null,"So your page ",Object(o.a)("strong",{parentName:"p"},"paths")," that are pre-rendered depend on external data**.** To handle this, Next.js lets you ",Object(o.a)("inlineCode",{parentName:"p"},"export")," an ",Object(o.a)("inlineCode",{parentName:"p"},"async")," function called ",Object(o.a)("inlineCode",{parentName:"p"},"getStaticPaths")," from a dynamic page (",Object(o.a)("inlineCode",{parentName:"p"},"pages/posts/[id].js")," in this case). This function gets called at build time and lets you specify which paths you want to pre-render."),Object(o.a)("pre",null,Object(o.a)("code",{parentName:"pre"},"// This function gets called at build time\nexport async function getStaticPaths() {\n  // Call an external API endpoint to get posts\n  const res = await fetch('https://.../posts')\n  const posts = await res.json()\n\n  // Get the paths we want to pre-render based on posts\n  const paths = posts.map((post) => ({\n    params: { id: post.id }\n  }))\n\n  // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n  return { paths, fallback: false }\n}\n")),Object(o.a)("p",null,"Also in ",Object(o.a)("inlineCode",{parentName:"p"},"pages/posts/[id].js"),", you need to export ",Object(o.a)("inlineCode",{parentName:"p"},"getStaticProps")," so that you can fetch the data about the post with this ",Object(o.a)("inlineCode",{parentName:"p"},"id")," and use it to pre-render the page:"),Object(o.a)("pre",null,Object(o.a)("code",{parentName:"pre"},"function Post({ post }) {\n  // Render post...\n}\n\nexport async function getStaticPaths() {\n  // ...\n}\n\n// This also gets called at build time\nexport async function getStaticProps({ params }) {\n  // params contains the post `id`.\n  // If the route is like /posts/1, then params.id is 1\n  const res = await fetch(`https://.../posts/${params.id}`)\n  const post = await res.json()\n\n  // Pass post data to the page via props\n  return { props: { post } }\n}\n\nexport default Post\n")),Object(o.a)("p",null,"To learn more about how ",Object(o.a)("inlineCode",{parentName:"p"},"getStaticPaths")," works, check out the ",Object(o.a)("a",{href:"/docs/basic-features/data-fetching.md#getstaticpaths-static-generation",parentName:"p"},"Data Fetching documentation"),"."),Object(o.a)("h3",null,"When should I use Static Generation?"),Object(o.a)("p",null,"We recommend using ",Object(o.a)("strong",{parentName:"p"},"Static Generation")," (with and without data) whenever possible because your page can be built once and served by CDN, which makes it much faster than having a server render the page on every request."),Object(o.a)("p",null,"You can use Static Generation for many types of pages, including:"),Object(o.a)("ul",null,Object(o.a)("li",{parentName:"ul"},"Marketing pages"),Object(o.a)("li",{parentName:"ul"},"Blog posts"),Object(o.a)("li",{parentName:"ul"},"E-commerce product listings"),Object(o.a)("li",{parentName:"ul"},"Help and documentation")),Object(o.a)("p",null,'You should ask yourself: "Can I pre-render this page ',Object(o.a)("strong",{parentName:"p"},"ahead")," of a user's request?\" If the answer is yes, then you should choose Static Generation."),Object(o.a)("p",null,"On the other hand, Static Generation is ",Object(o.a)("strong",{parentName:"p"},"not")," a good idea if you cannot pre-render a page ahead of a user's request. Maybe your page shows frequently updated data, and the page content changes on every request."),Object(o.a)("p",null,"In cases like this, you can do one of the following:"),Object(o.a)("ul",null,Object(o.a)("li",{parentName:"ul"},"Use Static Generation with ",Object(o.a)("strong",{parentName:"li"},"Client-side Rendering:")," You can skip pre-rendering some parts of a page and then use client-side JavaScript to populate them. To learn more about this approach, check out the ",Object(o.a)("a",{href:"/docs/basic-features/data-fetching.md#fetching-data-on-the-client-side",parentName:"li"},"Data Fetching documentation"),"."),Object(o.a)("li",{parentName:"ul"},"Use ",Object(o.a)("strong",{parentName:"li"},"Server-Side Rendering:")," Next.js pre-renders a page on each request. It will be slower because the page cannot be cached by a CDN, but the pre-rendered page will always be up-to-date. We'll talk about this approach below.")),Object(o.a)("h2",null,"Server-side Rendering"),Object(o.a)("blockquote",null,Object(o.a)("p",{parentName:"blockquote"},'Also referred to as "SSR" or "Dynamic Rendering".')),Object(o.a)("p",null,"If a page uses ",Object(o.a)("strong",{parentName:"p"},"Server-side Rendering"),", the page HTML is generated on ",Object(o.a)("strong",{parentName:"p"},"each request"),"."),Object(o.a)("p",null,"To use Server-side Rendering for a page, you need to ",Object(o.a)("inlineCode",{parentName:"p"},"export")," an ",Object(o.a)("inlineCode",{parentName:"p"},"async")," function called ",Object(o.a)("inlineCode",{parentName:"p"},"getServerSideProps"),". This function will be called by the server on every request."),Object(o.a)("p",null,"For example, suppose that your page needs to pre-render frequently updated data (fetched from an external API). You can write ",Object(o.a)("inlineCode",{parentName:"p"},"getServerSideProps")," which fetches this data and passes it to ",Object(o.a)("inlineCode",{parentName:"p"},"Page")," like below:"),Object(o.a)("pre",null,Object(o.a)("code",{parentName:"pre"},"function Page({ data }) {\n  // Render data...\n}\n\n// This gets called on every request\nexport async function getServerSideProps() {\n  // Fetch data from external API\n  const res = await fetch(`https://.../data`)\n  const data = await res.json()\n\n  // Pass data to the page via props\n  return { props: { data } }\n}\n\nexport default Page\n")),Object(o.a)("p",null,"As you can see, ",Object(o.a)("inlineCode",{parentName:"p"},"getServerSideProps")," is similar to ",Object(o.a)("inlineCode",{parentName:"p"},"getStaticProps"),", but the difference is that ",Object(o.a)("inlineCode",{parentName:"p"},"getServerSideProps")," is run on every request instead of on build time."),Object(o.a)("p",null,"To learn more about how ",Object(o.a)("inlineCode",{parentName:"p"},"getServerSideProps")," works, check out our ",Object(o.a)("a",{href:"/docs/basic-features/data-fetching.md#getserversideprops-server-side-rendering",parentName:"p"},"Data Fetching documentation")),Object(o.a)("h2",null,"Summary"),Object(o.a)("p",null,"We've discussed two forms of pre-rendering for Next.js."),Object(o.a)("ul",null,Object(o.a)("li",{parentName:"ul"},Object(o.a)("strong",{parentName:"li"},"Static Generation (Recommended):")," The HTML is generated at ",Object(o.a)("strong",{parentName:"li"},"build time")," and will be reused on each request. To make a page use Static Generation, either export the page component, or export ",Object(o.a)("inlineCode",{parentName:"li"},"getStaticProps")," (and ",Object(o.a)("inlineCode",{parentName:"li"},"getStaticPaths")," if necessary). It's great for pages that can be pre-rendered ahead of a user's request. You can also use it with Client-side Rendering to bring in additional data."),Object(o.a)("li",{parentName:"ul"},Object(o.a)("strong",{parentName:"li"},"Server-side Rendering:")," The HTML is generated on ",Object(o.a)("strong",{parentName:"li"},"each request"),". To make a page use Server-side Rendering, export ",Object(o.a)("inlineCode",{parentName:"li"},"getServerSideProps"),". Because Server-side Rendering results in slower performance than Static Generation, use this only if absolutely necessary.")))}u.isMDXComponent=!0,t.default=u},iHvh:function(e,t,a){(window.__NEXT_P=window.__NEXT_P||[]).push(["/posts/pages",function(){return a("VkGH")}])}},[["iHvh",0,2,1,3]]]);